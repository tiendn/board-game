{"version":3,"sources":["assets/card-default.png","assets/lion.png","constants/Config.ts","reducers/GameReducer.ts","reducers/RootReducer.ts","constants/ReduxTypes.ts","components/ControlButton.tsx","api/Api.ts","actions/GameAction.ts","utils/Utils.ts","components/Progress.tsx","components/MyDialog.tsx","components/ControlBar.tsx","components/GCard.tsx","components/Player.tsx","constants/Colors.ts","components/WarningSnackbars.tsx","components/ScoreTable.tsx","components/EndGame.tsx","components/Game.tsx","App.tsx","serviceWorker.js","index.tsx"],"names":["module","exports","__webpack_require__","p","Config","A","B","C","D","INIT_STATE","isReveal","isPlaying","isControlLoading","isEndGame","playerCards","playerPoints","_playerPoints","Object","defineProperty","playerRemain","deckId","matchNumber","cardRemain","err","combineReducers","game","_playerPoints2","state","arguments","length","undefined","action","type","objectSpread","payload","ControlButton","props","react_default","a","createElement","index_es","variant","color","aria-label","ariaLabel","className","onClick","disabled","title","Api","classCallCheck","this","createClass","key","value","_get","asyncToGenerator","regenerator_default","mark","_callee","url","params","initParams","result","_args","wrap","_context","prev","next","timeout","TIMEOUT_RESPONSE","axios","get","sent","abrupt","stop","_x","apply","_giveDeckCard","_callee2","_context2","_shuffleDeck","_callee3","deck_id","_context3","concat","_x2","_drawCards","_callee4","_context4","_x3","initDeck","_ref","dispatch","data","giveDeckCard","success","drawCards","showError","shuffleDeck","_ref2","getState","_state$game2","backMatch","newCardRemain","promises","i","q","push","Promise","all","then","_ref4","response","checkAndGetDrawCardsStatus","_x5","resolve","reject","forEach","r","index","cards","getPlayerPointByMatch","playerCardByMatch","playerCardValue","winners","maxCardValue","newPlayerRemain","toConsumableArray","s","player","card","parseInt","winnerLength","gift","indexOf","filter","newPlayerPoints","withStyles","theme","progress","margin","spacing","unit","classes","CircularProgress_default","MyDialog","_this","possibleConstructorReturn","getPrototypeOf","call","open","handleClose","bind","assertThisInitialized","showDialog","setState","_this2","_this$props","dialogContent","dialogTitle","btnCloseTitle","btnOpenTitle","onClose","aria-labelledby","aria-describedby","id","onAgree","autoFocus","React","PureComponent","ControlBar","dialogRef","onPlay","onShuffle","onReveal","onDraw","shuffle","rePlayGame","_ref3","_state$game","_x4","_this$props2","_this$props3","_this$props4","placement","icons_index_es","style","justifyContent","MyDialog_MyDialog","ref","_this$props5","components_Progress","renderControlBar","connect","GCard","src","images","png","alt","code","CardDefault","Player","playerId","GCard_GCard","marginLeft","Colors","WarningSnackbars","anchorOrigin","vertical","horizontal","autoHideDuration","message","paddingRight","backgroundColor","Component","currentPlayerPoints","assign","classNames","paddingLeft","letterSpacing","paddingTop","toLocaleString","LionImg","EndGame","playAgain","nextProps","getWinnerInformation","maxPoints","winnerId","keys","_this3","_this$state","Game","components_Player","components_ControlBar","components_WarningSnackbars","components_ScoreTable","components_EndGame","middleWare","applyMiddleware","ReduxThunk","store","createStore","reducers","App","es","Game_Game","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b940d6fa.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/card-default.384ce530.png\";","module.exports = __webpack_public_path__ + \"static/media/lion.2162441e.png\";","export const Config = {\n    // Network\n\n    // Game\n    numberOfCardsPerMatch: 3,\n    numberOfPlayers: 4,         // The number of players\n    betPoints: 5000,\n\n    Player: {\n        A: 'A',\n        B: 'B',\n        C: 'C',\n        D: 'D'\n    },\n    currentPlayer: \"B\"\n}","import { Config } from './../constants/Config';\nimport { START_GAME, PLAYING_GAME, REVEAL_GAME, NEXT_MATCH, SHOW_ERR, HIDE_ERR, DRAW_CARDS, END_GAME, BACK_MATCH, SHUFFLE_GAME_START, SHUFFLE_GAME_SUCCESS, SHUFFLE_GAME_FAILED, PLAY_GAME_AGAIN } from './../constants/ReduxTypes';\nconst INIT_STATE = {\n    isReveal: false,            // The card is face up or down.\n    isPlaying: false,           // The game is playing or not.\n    isControlLoading: false,    // Control bar is loading or not\n    isEndGame: false,\n    playerCards: {},            // Array cards of player by each match,\n    playerPoints: {\n        [Config.Player.A]: 20000,\n        [Config.Player.B]: 20000,\n        [Config.Player.C]: 20000,\n        [Config.Player.D]: 20000,\n    },           // Array points of player by each match,\n    playerRemain: [Config.Player.A, Config.Player.B, Config.Player.C, Config.Player.D],    // Number of players remain in game\n    deckId: null,               // The current deck identifier\n    matchNumber: 0,             // The current match number\n    cardRemain: 52,          // Number of cards remain in game\n    err: ''\n}\n\nexport default (state = INIT_STATE, action: any) => {\n    switch (action.type) {\n        // Make app loading\n        case START_GAME:\n            return {\n                ...state,\n                isReveal: false,\n                isControlLoading: true,\n                isPlaying: true,\n                isEndGame: false\n            }\n\n        // Start playing game\n        case PLAYING_GAME:\n            return {\n                ...state,\n                deckId: action.payload,\n                matchNumber: 1\n            }\n\n        case SHUFFLE_GAME_START:\n            return {\n                ...state,\n                isControlLoading: true,\n            }\n\n        case SHUFFLE_GAME_SUCCESS:\n            return {\n                ...state,\n                isControlLoading: false,\n                cardRemain: 52\n            }\n\n        case SHUFFLE_GAME_FAILED:\n            return {\n                ...state,\n                isControlLoading: false,\n            }\n\n        case DRAW_CARDS:\n            return {\n                ...state,\n                isControlLoading: false,\n                cardRemain: action.payload.cardRemain,\n                playerCards: { ...state.playerCards, [state.matchNumber]: action.payload.playerCards }\n            }\n\n        // Reveal game\n        case REVEAL_GAME:\n            return {\n                ...state,\n                isReveal: true,\n                playerPoints: action.payload.playerPoints,\n                playerRemain: action.payload.playerRemain\n            }\n\n        // Next game match \n        case NEXT_MATCH:\n            return {\n                ...state,\n                isReveal: false,\n                isControlLoading: true,\n                matchNumber: state.matchNumber + 1\n            }\n\n        case BACK_MATCH:\n            return {\n                ...state,\n                isReveal: true,\n                isControlLoading: false,\n                matchNumber: state.matchNumber - 1\n            }\n\n        case END_GAME:\n            return {\n                ...state,\n                isReveal: true,\n                playerPoints: action.payload.playerPoints,\n                playerRemain: action.payload.playerRemain,\n                isEndGame: true,\n            }\n\n        case PLAY_GAME_AGAIN:\n            return {\n                ...INIT_STATE,\n                playerPoints: {\n                    [Config.Player.A]: 20000,\n                    [Config.Player.B]: 20000,\n                    [Config.Player.C]: 20000,\n                    [Config.Player.D]: 20000,\n                },\n            };\n\n        // Show err Snackbars with error message\n        case SHOW_ERR:\n            return {\n                ...state,\n                err: action.payload\n            }\n\n        // Hide err Snackbars \n        case HIDE_ERR:\n            return {\n                ...state,\n                err: ''\n            }\n        default:\n            return state;\n    }\n}","import { combineReducers } from 'redux';\nimport game from '../reducers/GameReducer';\n\nexport default combineReducers({\n    game\n});\n","export const START_GAME = \"start_game\";\nexport const PLAYING_GAME = \"playing_game\";\nexport const PLAY_GAME_AGAIN = \"play_game_again\";\nexport const REVEAL_GAME = \"reveal_game\";\nexport const SHUFFLE_GAME_START = \"shuffle_game_start\";\nexport const SHUFFLE_GAME_SUCCESS = \"shuffle_game_success\";\nexport const SHUFFLE_GAME_FAILED = \"shuffle_game_failed\";\nexport const END_GAME = \"end_game\";\n\nexport const DRAW_CARDS = \"draw_cards\";\n\nexport const NEXT_MATCH = \"next_match\";\nexport const BACK_MATCH = \"back_match\";\n\nexport const SHOW_ERR = \"show_err\";\nexport const HIDE_ERR = \"hide_err\";","import React from 'react';\nimport { Fab, PropTypes } from '@material-ui/core';\nimport { } from '@material-ui/icons';\n\ninterface Props {\n    title: string,\n    onClick: Function,\n    color: PropTypes.Color,\n    ariaLabel: string,\n    disabled?: boolean,\n}\n\nexport default (props: Props) => (\n    <Fab\n        variant=\"extended\"\n        color={props.color}\n        aria-label={props.ariaLabel}\n        className=\"control-button\"\n        onClick={() => props.onClick()}\n        disabled={props.disabled}\n    >\n        {props.title}\n    </Fab>\n);","import axios from 'axios';\n\nexport class Api {\n    static TIMEOUT_RESPONSE = 10000; // ms\n\n    static async get(url: string, params = {}) {\n        const initParams = {\n            timeout: this.TIMEOUT_RESPONSE,\n        }\n        const result = await axios.get(url, { ...initParams, ...params });\n        // Handle server error\n        // if (result.status < 200 || result.status >= 400) return;\n        return result;\n    }\n\n    /**\n     * Get new deck of cards\n     */\n    static async giveDeckCard() {\n        const result = await Api.get('https://deckofcardsapi.com/api/deck/new/shuffle/?deck_count=1');\n        return result;\n    }\n\n    /**\n     * Reshuffle the current session of game. \n     * \n     * All remaining card will be returned to default value: 52 cards\n     */\n    static async shuffleDeck(deck_id: string) {\n        const result = await Api.get(`https://deckofcardsapi.com/api/deck/${deck_id}/shuffle/`);\n        return result;\n    }\n\n    /**\n     * Get three cards in deck.\n     */\n    static async drawCards(deck_id: string) {\n        const result = await Api.get(`https://deckofcardsapi.com/api/deck/${deck_id}/draw/?count=3`);\n        return result;\n    }\n}","import { CardEntity } from './../entities/Card';\nimport { getPlayerFromIndex, getPointFromValue } from './../utils/Utils';\nimport { Config } from './../constants/Config';\nimport { Api } from './../api/Api';\nimport { START_GAME, PLAYING_GAME, REVEAL_GAME, SHOW_ERR, HIDE_ERR, DRAW_CARDS, SHUFFLE_GAME_START, SHUFFLE_GAME_SUCCESS, END_GAME, NEXT_MATCH, BACK_MATCH, SHUFFLE_GAME_FAILED, PLAY_GAME_AGAIN } from './../constants/ReduxTypes';\nimport { AxiosResponse } from 'axios';\nexport const playGame = () => (dispatch: Function) => {\n    initDeck(dispatch);                 // New game\n    dispatch({\n        type: START_GAME\n    })\n}\n\n\nconst initDeck = async (dispatch: Function) => {\n    const result = await Api.giveDeckCard();\n\n    const { data } = result;\n    if (data && data.success) {\n        dispatch({\n            type: PLAYING_GAME,\n            payload: data.deck_id\n        })\n        dispatch(drawCards());\n\n    } else {\n        dispatch(showError(\"Init game failed\"));\n    }\n}\n\n// Shuffle deck\nexport const shuffleDeck = (deckId: string) => async (dispatch: Function) => {\n    dispatch({\n        type: SHUFFLE_GAME_START\n    })\n    const result = await Api.shuffleDeck(deckId);\n    const { data } = result;\n\n    if (data && data.success) {\n        dispatch({\n            type: SHUFFLE_GAME_SUCCESS\n        })\n    } else {\n        dispatch(showError(\"Shuffle game failed\"));\n        dispatch({\n            type: SHUFFLE_GAME_FAILED\n        });\n    }\n}\n\n// Reveal\nexport const revealGame = () => async (dispatch: Function, getState: Function) => {\n    const state = getState();\n    const { playerCards, matchNumber, playerRemain, playerPoints } = state.game;\n    if (playerCards[matchNumber]) {\n        const result: any = await getPlayerPointByMatch(playerCards[matchNumber], playerRemain, playerPoints);\n        const { newPlayerPoints, newPlayerRemain } = result;\n        // If game 5, alert the winner + shuffle.\n        if (matchNumber === 5 || newPlayerRemain.length === 1) {\n            dispatch({\n                type: END_GAME,\n                payload: {\n                    playerPoints: newPlayerPoints,\n                    playerRemain: newPlayerRemain\n                }\n            })\n        }\n\n        dispatch({\n            type: REVEAL_GAME,\n            payload: {\n                playerPoints: newPlayerPoints,\n                playerRemain: newPlayerRemain\n            }\n        })\n    }\n}\n\nexport const drawCards = () => (dispatch: Function, getState: Function) => {\n    const state = getState();\n    const { deckId, cardRemain, playerRemain } = state.game;\n\n    if (cardRemain < playerRemain.length * Config.numberOfCardsPerMatch) {\n        dispatch(showError(\"Please shuffle the deck, not enough card\"));\n        dispatch(backMatch());\n        return;\n    }\n    let newCardRemain = cardRemain - playerRemain.length * Config.numberOfCardsPerMatch;\n    const promises = [];\n    for (let i = 1; i <= playerRemain.length; i++) {\n        const q = Api.drawCards(deckId);\n        promises.push(q);\n    }\n    Promise.all(promises).then(async (response) => {\n        let playerCards = {};\n\n        playerCards = await checkAndGetDrawCardsStatus(response, playerRemain);\n\n        if (!playerCards) {\n            dispatch(showError(\"Fetch data failed\"));\n            dispatch(shuffleDeck(deckId));\n            return;\n        }\n        dispatch({\n            type: DRAW_CARDS,\n            payload: {\n                playerCards,\n                cardRemain: newCardRemain\n            }\n        })\n    })\n}\n\nexport const nextMatch = () => {\n    return {\n        type: NEXT_MATCH\n    }\n}\n\nexport const backMatch = () => {\n    return {\n        type: BACK_MATCH\n    }\n}\n\nexport const playGameAgain = () => {\n    return {\n        type: PLAY_GAME_AGAIN\n    }\n}\n\nexport const showError = (err: string) => {\n    return {\n        type: SHOW_ERR,\n        payload: err\n    }\n}\n\nexport const hideError = () => {\n    return {\n        type: HIDE_ERR\n    }\n}\n\nconst checkAndGetDrawCardsStatus = (response: AxiosResponse[], playerRemain: string[]) => {\n    return new Promise((resolve, reject) => {\n        let playerCards: any = {};\n\n        response.forEach((r, index) => {\n            const { data } = r;\n            playerCards[playerRemain[index]] = data.cards;\n        });\n\n        resolve(playerCards);\n    });\n}\n\nconst getPlayerPointByMatch = (playerCardByMatch: any, playerRemain: string[], playerPoints: any) => {\n    const playerCardValue: any = {};\n    let winners: any = [];\n    // Get max total card value\n    let maxCardValue = -99999999;\n    let newPlayerRemain = [...playerRemain];\n\n    return new Promise((resolve, reject) => {\n        new Promise((s) => {\n            // Get total value of this match each player\n            playerRemain.forEach((player, index) => {\n                playerCardByMatch[player].forEach((card: CardEntity) => {\n\n                    if (!playerCardValue[player]) {\n                        playerCardValue[player] = 0;\n                    }\n                    playerCardValue[player] += getPointFromValue(card.value);\n\n                    if (playerCardValue[player] > maxCardValue) {\n                        maxCardValue = playerCardValue[player];\n                    }\n                })\n            });\n            s();\n        }).then(() => {\n            playerRemain.forEach((player, index) => {\n                if (maxCardValue === playerCardValue[player]) {\n                    winners.push(player);\n                }\n            });\n        }).then(() => {\n            // Check which player win\n            const winnerLength = winners.length;\n            const gift = Config.betPoints * (playerRemain.length - winnerLength) / winnerLength;\n\n            playerRemain.forEach((player, index) => {\n                if (winners.indexOf(player) >= 0) {\n                    playerPoints[player] += gift;\n                } else {\n                    // Re-calculate point of each player, if < 5000 out.\n                    playerPoints[player] -= Config.betPoints;\n                    if (playerPoints[player] < Config.betPoints) {\n                        newPlayerRemain = newPlayerRemain.filter((p) => p !== player);\n                    }\n                }\n            })\n\n            const result: any = {\n                newPlayerPoints: playerPoints,\n                newPlayerRemain\n            }\n\n            resolve(result);\n        })\n    })\n}","export const getPlayerFromIndex = (index: number) => {\n    switch (index) {\n        case 1:\n            return \"A\";\n        case 2:\n            return \"B\";\n        case 3:\n            return \"C\";\n        case 4:\n            return \"D\";\n        default:\n            return null;\n    }\n}\n\nexport const getPointFromValue = (value: string) => {\n    if (value == \"ACE\") {\n        return 1;\n    }\n    if (value == \"JACK\" || value == \"QUEEN\" || value == \"KING\") {\n        return 10;\n    }\n    return parseInt(value, 10);\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nconst styles = (theme: any) => ({\n    progress: {\n        margin: theme.spacing.unit * 2,\n    },\n});\n\nconst Progress = (props: any) => {\n    const { classes } = props;\n    return (\n        <CircularProgress className={classes.progress} color=\"primary\" />\n    );\n}\n\nProgress.propTypes = {\n    classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(Progress);","import React, { MouseEvent } from 'react'\nimport { DialogTitle, Dialog, DialogContent, DialogActions, Button, DialogContentText } from '@material-ui/core';\n\ninterface Props {\n    dialogContent: string;\n    dialogTitle: string;\n    btnCloseTitle?: string;\n    btnOpenTitle?: string;\n    onAgree: Function;\n}\n\ninterface State {\n    open: boolean\n}\n\nexport default class MyDialog extends React.PureComponent<Props, State> {\n    constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            open: false\n        }\n        this.handleClose = this.handleClose.bind(this);\n        this.showDialog = this.showDialog.bind(this);\n    }\n\n    showDialog() {\n        this.setState({ open: true });\n    }\n\n    handleClose() {\n        this.setState({ open: false });\n    }\n\n    render() {\n        const { open } = this.state;\n        const { dialogContent, dialogTitle, btnCloseTitle, btnOpenTitle } = this.props;\n\n        return (\n            <Dialog\n                open={open}\n                onClose={this.handleClose}\n                aria-labelledby=\"alert-dialog-title\"\n                aria-describedby=\"alert-dialog-description\"\n            >\n                <DialogTitle id=\"alert-dialog-title\">{dialogTitle}</DialogTitle>\n                <DialogContent>\n                    <DialogContentText id=\"alert-dialog-description\">\n                        {dialogContent}\n                    </DialogContentText>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={this.handleClose} color=\"primary\">\n                        {btnCloseTitle || \"Disagree\"}\n                    </Button>\n                    <Button onClick={() => {\n                        this.handleClose();\n                        this.props.onAgree();\n                    }}\n                        color=\"primary\" autoFocus>\n                        {btnOpenTitle || \"Agree\"}\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        )\n    }\n}","// Control bar\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport ControlButton from './ControlButton';\nimport { Fab, Tooltip } from '@material-ui/core';\nimport { PlayCircleFilled, CloseRounded } from '@material-ui/icons';\nimport { playGame, shuffleDeck, drawCards, revealGame, nextMatch, playGameAgain } from '../actions/GameAction';\nimport Progress from './Progress';\nimport MyDialog from './MyDialog';\n\ninterface Props {\n    isPlaying: boolean;\n    isControlLoading: boolean;\n    isReveal: boolean;\n    isEndGame: boolean;\n    cardRemain: number;\n    deckId: string;\n    dispatch: Function;\n    style?: any;\n}\n\nclass ControlBar extends React.PureComponent<Props> {\n    dialogRef: any;\n    constructor(props: Props) {\n        super(props);\n        this.onPlay = this.onPlay.bind(this);\n        this.onShuffle = this.onShuffle.bind(this);\n        this.onReveal = this.onReveal.bind(this);\n        this.onDraw = this.onDraw.bind(this);\n        this.shuffle = this.shuffle.bind(this);\n        this.rePlayGame = this.rePlayGame.bind(this);\n    }\n\n    onDraw() {\n        const { dispatch, deckId } = this.props;\n        dispatch(nextMatch());\n        dispatch(drawCards());\n    }\n\n    onReveal() {\n        this.props.dispatch(revealGame());\n    }\n\n    onShuffle() {\n        if (this.dialogRef) {\n            this.dialogRef.showDialog();\n        }\n    }\n\n    onPlay() {\n        const { dispatch, deckId } = this.props;\n        dispatch(playGame());\n    }\n\n    rePlayGame() {\n        this.props.dispatch(playGameAgain());\n    }\n\n    shuffle() {\n        const { dispatch, deckId } = this.props;\n        dispatch(shuffleDeck(deckId));\n    }\n\n    renderControlBar() {\n        const { isEndGame, isReveal } = this.props;\n        if (isEndGame) {\n            return (\n                <Tooltip title=\"Quit\" placement=\"top\">\n                    <Fab color=\"secondary\" aria-label=\"Quit\" className=\"control-btn\" onClick={this.rePlayGame}>\n                        <CloseRounded />\n                    </Fab>\n                </Tooltip>\n            )\n        }\n\n        return (\n            <div className=\"row\" style={{ justifyContent: 'space-between' }}>\n                <ControlButton title=\"Shuffle\" color=\"default\" ariaLabel=\"Shuffle\" onClick={this.onShuffle} />\n                <ControlButton title=\"Reveal\" color=\"primary\" ariaLabel=\"Reveal\" onClick={this.onReveal} />\n                <ControlButton disabled={!isReveal} title=\"Draw\" color=\"secondary\" ariaLabel=\"Draw\" onClick={this.onDraw} />\n                <MyDialog\n                    ref={(ref) => this.dialogRef = ref}\n                    dialogContent=\"All cards will be shuffled\"\n                    dialogTitle=\"Shuffle the deck\"\n                    onAgree={this.shuffle}\n                />\n            </div>\n        )\n    }\n\n    renderPlayBtn() {\n        return (\n            <Tooltip title=\"Play\" placement=\"top\">\n                <Fab color=\"primary\" aria-label=\"Play\" className=\"control-btn\" onClick={this.onPlay}>\n                    <PlayCircleFilled />\n                </Fab>\n            </Tooltip>\n        );\n    }\n\n    render() {\n        const { isPlaying, isControlLoading, isReveal, cardRemain, style } = this.props;\n        if (!isPlaying) {\n            return (\n                <Tooltip title=\"Play\" placement=\"top\">\n                    <Fab color=\"primary\" aria-label=\"Play\" className=\"control-btn\" onClick={this.onPlay}>\n                        <PlayCircleFilled />\n                    </Fab>\n                </Tooltip>\n            )\n        }\n        if (isControlLoading) {\n            return (\n                <Progress />\n            );\n        }\n\n        return (\n            <div style={style} className=\"control-bar\">\n                {this.renderControlBar()}\n                <p className=\"text-center\">Number of cards remain: {cardRemain} </p>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state: any) => {\n    return {\n        isReveal: state.game.isReveal,\n        isPlaying: state.game.isPlaying,\n        isControlLoading: state.game.isControlLoading,\n        isEndGame: state.game.isEndGame,\n        deckId: state.game.deckId,\n        cardRemain: state.game.cardRemain\n    }\n}\n\nexport default connect(mapStateToProps)(ControlBar);","import React from 'react';\nimport { connect } from 'react-redux';\nimport classNames from 'classnames';\nimport { Card, CardContent, CardMedia } from '@material-ui/core';\nimport { Help } from '@material-ui/icons';\nimport { CardEntity } from '../entities/Card';\nimport CardDefault from '../assets/card-default.png'\n\ninterface Props {\n    isReveal: boolean,\n    card: CardEntity,\n    style?: any\n}\n\nexport default class GCard extends React.PureComponent<Props>{\n    render() {\n        const { isReveal, card, style } = this.props;\n        if (isReveal) {\n            return (\n                <img src={card.images.png} alt={card.code} style={style} className=\"card-image\" />\n            )\n        }\n        return <img src={CardDefault} alt={card.code} style={style} className=\"card-image\" />\n        // return (\n        //     <Card className=\"card\" >\n\n        //         <CardContent >\n        //         <img src={card.images.png} alt={card.code} className=\"card-image\" />\n        //         </CardContent>\n        //     </Card>\n        // );\n    }\n}\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport GCard from './GCard';\nimport { getPlayerFromIndex } from '../utils/Utils';\n\ninterface Props {\n    isReveal: boolean,\n    playerId: string,\n    playerCards: any[],\n    matchNumber: number\n}\n\nclass Player extends React.PureComponent<Props> {\n    render() {\n        const { isReveal, playerId, playerCards, matchNumber } = this.props;\n        const data = playerCards[matchNumber];\n\n        if (!data) {\n            return (\n                <div className=\"player-container\" />\n            )\n        }\n\n        // With case config number of player\n        if (!data[playerId]) return (\n            <div className=\"player-container\" />\n        )\n\n        return (\n            <div className=\"player-container\">\n                <div className=\"row\">\n                    <GCard isReveal={isReveal} card={data[playerId][0]} />\n                    <GCard isReveal={isReveal} card={data[playerId][1]} style={{ marginLeft: \"-20%\" }} />\n                    <GCard isReveal={isReveal} card={data[playerId][2]} style={{ marginLeft: \"-20%\" }} />\n                </div>\n                <div className=\"text-center\">{playerId}</div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state: any) => ({\n    isReveal: state.game.isReveal,\n    matchNumber: state.game.matchNumber,\n    playerCards: state.game.playerCards\n})\n\nexport default connect(mapStateToProps)(Player);","export const Colors = {\n    redWarning: \"#d32f2f\"\n}","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Close, Warning } from '@material-ui/icons';\nimport { IconButton, SnackbarContent, Snackbar } from '@material-ui/core';\nimport { hideError } from '../actions/GameAction';\nimport { amber } from '@material-ui/core/colors';\nimport { Colors } from '../constants/Colors';\n\ninterface WarningProps {\n    err: string,\n    dispatch: Function\n}\n\nclass WarningSnackbars extends React.Component<WarningProps> {\n    constructor(props: WarningProps) {\n        super(props);\n        this.onClose = this.onClose.bind(this);\n    }\n\n    onClose() {\n        this.props.dispatch(hideError());\n    }\n\n    render() {\n        const { err } = this.props;\n\n        return (\n            <Snackbar\n                anchorOrigin={{\n                    vertical: 'bottom',\n                    horizontal: 'left',\n                }}\n                open={err !== ''}\n                autoHideDuration={3000}\n                onClose={this.onClose}\n            >\n                <SnackbarContent\n                    aria-describedby=\"client-snackbar\"\n                    message={\n                        <span id=\"client-snackbar\">\n                            <Warning style={{ paddingRight: 10 }} />\n                            {err}\n                        </span>\n                    }\n                    action={[\n                        <IconButton\n                            key=\"close\"\n                            aria-label=\"Close\"\n                            color=\"inherit\"\n                            onClick={this.onClose}\n                        >\n                            <Close />\n                        </IconButton>,\n                    ]}\n                    style={{ backgroundColor: Colors.redWarning }}\n                />\n            </Snackbar>\n        );\n    }\n}\n\nconst mapStateToProps = (state: any) => ({\n    err: state.game.err\n})\n\nexport default connect(mapStateToProps)(WarningSnackbars);","// Store Table\nimport React from 'react';\nimport classNames from 'classnames';\nimport { AccountBox } from '@material-ui/icons';\nimport { connect } from 'react-redux';\nimport { Config } from '../constants/Config';\nimport LionImg from '../assets/lion.png';\n\ninterface Props {\n    currentPlayerPoints: any,\n    isPlaying: boolean,\n    matchNumber: number\n}\n\nconst ScoreTable = (props: Props) => {\n    const { currentPlayerPoints, isPlaying, matchNumber } = props;\n    if (!isPlaying) return null;\n\n    return (\n        <div id=\"score-table\">\n            <div className={classNames(\"text-center\", \"bold\")}>GAME: {matchNumber} (${Config.betPoints})</div>\n            <div style={{ paddingLeft: 5, letterSpacing: 1.2, paddingTop: 6 }}>\n                <div className=\"point-value\"><AccountBox className=\"point-icon\" />A <span className=\"margin-left-16\">${currentPlayerPoints[Config.Player.A].toLocaleString()}</span> <span className=\"point-label\"></span></div>\n                <div className={classNames(\"point-value\", \"point-value-highest\")}><AccountBox className=\"point-icon\" />B <span className=\"margin-left-16\">${currentPlayerPoints[Config.Player.B].toLocaleString()}</span> <span className=\"point-label\"></span></div>\n                <div className=\"point-value\"><AccountBox className=\"point-icon\" />C <span className=\"margin-left-16\">${currentPlayerPoints[Config.Player.C].toLocaleString()}</span> <span className=\"point-label\"></span></div>\n                <div className=\"point-value\"><AccountBox className=\"point-icon\" />D <span className=\"margin-left-16\">${currentPlayerPoints[Config.Player.D].toLocaleString()}</span> <span className=\"point-label\"></span></div>\n            </div>\n            <img src={LionImg} className=\"score-tattoo\" />\n        </div>\n    )\n}\n\nconst mapStateToProps = (state: any) => {\n    return {\n        isPlaying: state.game.isPlaying,\n        currentPlayerPoints: Object.assign({}, state.game.playerPoints),\n        matchNumber: state.game.matchNumber\n    }\n}\n\nexport default connect(mapStateToProps)(ScoreTable);","import React from 'react';\nimport { connect } from 'react-redux';\nimport MyDialog from './MyDialog';\nimport { Config } from '../constants/Config';\nimport { playGameAgain } from '../actions/GameAction';\n\ninterface Props {\n    matchNumber: number;\n    playerPoints: any;\n    isEndGame: boolean;\n    dispatch: Function;\n}\n\ninterface State {\n    dialogTitle: string\n    dialogContent: string\n}\n\nclass EndGame extends React.PureComponent<Props, State> {\n    dialogRef: any;\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            dialogTitle: \"\",\n            dialogContent: \"\"\n        }\n        this.playAgain = this.playAgain.bind(this);\n    }\n\n    componentWillReceiveProps(nextProps: Props) {\n        if (nextProps.matchNumber === 5 && nextProps.isEndGame) {\n            this.getWinnerInformation();\n        }\n    }\n\n    getWinnerInformation() {\n        const { playerPoints } = this.props;\n        let maxPoints = -999999;\n        let winnerId = \"\";\n        let dialogContent = \"\";\n        let dialogTitle = \"\";\n        Object.keys(playerPoints).forEach((playerId) => {\n            if (playerPoints[playerId] > maxPoints) {\n                maxPoints = playerPoints[playerId];\n                winnerId = playerId;\n            }\n        })\n\n\n        dialogTitle = winnerId === Config.currentPlayer ? \"VICTORY\" : \"DEFEAT\";\n        dialogContent = `The winner is ${winnerId} and have ${maxPoints} points`;\n\n        this.setState({\n            dialogTitle, dialogContent\n        }, () => {\n            if (this.dialogRef) {\n                this.dialogRef.showDialog();\n            }\n        })\n    }\n\n    playAgain() {\n        this.props.dispatch(playGameAgain());\n    }\n\n    render() {\n        const { dialogContent, dialogTitle } = this.state;\n\n        return (\n            <MyDialog\n                ref={(ref) => this.dialogRef = ref}\n                dialogContent={dialogContent}\n                dialogTitle={dialogTitle}\n                btnOpenTitle=\"Play again\"\n                btnCloseTitle=\"Quit\"\n                onAgree={this.playAgain}\n            />\n        );\n    }\n\n}\n\nconst mapStateToProps = (state: any) => ({\n    matchNumber: state.game.matchNumber,\n    playerPoints: state.game.playerPoints,\n    isEndGame: state.game.isEndGame\n})\n\nexport default connect(mapStateToProps)(EndGame);\n","import React from 'react';\nimport classNames from 'classnames';\nimport ControlBar from './ControlBar';\nimport Player from './Player';\nimport WarningSnackbars from './WarningSnackbars';\nimport ScoreTable from './ScoreTable';\nimport { Config } from '../constants/Config';\nimport EndGame from './EndGame';\n\nexport default class Game extends React.PureComponent {\n    render() {\n        return (\n            <div className=\"container\">\n                <div id=\"game-container\">\n                    <Player playerId={Config.Player.A} />\n                    <div className={classNames(\"row\", \"full-width\")} style={{ justifyContent: \"space-between\" }}>\n                        <Player playerId={Config.Player.C} />\n                        <ControlBar />\n                        <Player playerId={Config.Player.D} />\n                    </div>\n                    <Player playerId={Config.Player.B} />\n                </div>\n                <WarningSnackbars />\n                <ScoreTable />\n                <EndGame />\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport ReduxThunk from 'redux-thunk';\nimport reducers from './reducers/RootReducer';\nimport Game from './components/Game';\n\nconst middleWare = applyMiddleware(ReduxThunk);\n\nconst store = createStore(reducers, {}, middleWare);\n\nclass App extends Component {\n    render() {\n        return (\n            <Provider store={store}>\n                <Game />\n            </Provider>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                        'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf('typescript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}